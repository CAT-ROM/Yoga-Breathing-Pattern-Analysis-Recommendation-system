{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sairoshinikandregula/yoga-breathing-pattern-analysis-and-recommendation?scriptVersionId=212426799\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"This system uses machine learning to analyze a userâ€™s breathing patterns (rate, depth, rhythm, and duration) during different yoga practices. A **Random Forest** model is trained on synthetic data to classify the most suitable practice (Pranayama, Meditation, Hatha Yoga, Vinyasa, or Restorative). Users can input their breathing data, and the system recommends the most appropriate yoga practice to improve their breathing technique.\r\n","metadata":{}},{"cell_type":"code","source":"pip install numpy pandas scikit-learn matplotlib","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-11T07:40:03.875739Z","iopub.execute_input":"2024-12-11T07:40:03.876284Z","iopub.status.idle":"2024-12-11T07:40:14.177206Z","shell.execute_reply.started":"2024-12-11T07:40:03.876237Z","shell.execute_reply":"2024-12-11T07:40:14.175612Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\nclass YogaBreathAnalyzer:\n    def __init__(self):\n        self.model = None\n        self.scaler = None\n        self.breathing_data = None\n\n    def generate_dataset(self):\n        \"\"\"Generate synthetic breathing dataset\"\"\"\n        np.random.seed(42)\n        \n        # Create dataset with breathing rate and corresponding yoga asanas\n        data = [\n            [6, 'Pranayama'],\n            [8, 'Meditation'],\n            [10, 'Hatha Yoga'],\n            [12, 'Vinyasa Flow'],\n            [14, 'Power Yoga'],\n            [16, 'Ashtanga Yoga'],\n            [18, 'Dynamic Yoga'],\n            [20, 'Power Yoga']\n        ]\n        \n        columns = ['Breathing_Rate', 'Yoga_Asana']\n        self.breathing_data = pd.DataFrame(data, columns=columns)\n        return self.breathing_data\n\n    def train_model(self):\n        \"\"\"Train a simple machine learning model\"\"\"\n        # Generate dataset if not exists\n        if self.breathing_data is None:\n            self.generate_dataset()\n        \n        # Prepare data\n        X = self.breathing_data[['Breathing_Rate']].values\n        y = self.breathing_data['Yoga_Asana']\n        \n        # Scale features\n        self.scaler = StandardScaler()\n        X_scaled = self.scaler.fit_transform(X)\n        \n        # Train Random Forest Classifier\n        self.model = RandomForestClassifier(n_estimators=100, random_state=42)\n        self.model.fit(X_scaled, y)\n        \n        return self.model\n\n    def recommend_yoga_asana(self, breathing_rate):\n        \"\"\"Recommend yoga asana based on breathing rate\"\"\"\n        # Ensure model is trained\n        if self.model is None or self.scaler is None:\n            self.train_model()\n        \n        # Scale input\n        scaled_rate = self.scaler.transform([[breathing_rate]])\n        \n        # Predict yoga asana\n        prediction = self.model.predict(scaled_rate)[0]\n        \n        # Yoga asana recommendations\n        asana_details = {\n            'Pranayama': \"Focus on deep, controlled breathing. Practice Ujjayi Pranayama.\",\n            'Meditation': \"Emphasize mindful breathing. Try seated meditation poses.\",\n            'Hatha Yoga': \"Integrate gentle movements with breath. Practice Surya Namaskar.\",\n            'Vinyasa Flow': \"Synchronize breath with dynamic movements. Do flow sequences.\",\n            'Power Yoga': \"Intense practice with strong breath connection. Practice challenging asanas.\",\n            'Ashtanga Yoga': \"Structured sequence with breath-movement sync. Follow primary series.\",\n            'Dynamic Yoga': \"Energetic practice with continuous movement. Try power vinyasa.\"\n        }\n        \n        return {\n            'asana': prediction,\n            'details': asana_details.get(prediction, 'General yoga practice')\n        }\n\ndef analyze_breathing_rate(breathing_rate):\n    \"\"\"Function to analyze breathing rate and provide recommendation\"\"\"\n    # Create analyzer instance\n    analyzer = YogaBreathAnalyzer()\n    \n    # Train the model\n    analyzer.train_model()\n    \n    # Get recommendation\n    result = analyzer.recommend_yoga_asana(breathing_rate)\n    \n    # Print and return results\n    print(f\"Recommended Yoga Asana: {result['asana']}\")\n    print(f\"Recommendation Details: {result['details']}\")\n    \n    return result\n\n# Demonstration of usage\ndef main():\n    print(\"Yoga Breathing Pattern Analyzer\")\n    \n    # Example breathing rates to test\n    test_rates = [6, 12, 16, 20]\n    \n    for rate in test_rates:\n        print(f\"\\nAnalyzing breathing rate: {rate} breaths/min\")\n        analyze_breathing_rate(rate)\n\n# Kaggle-specific execution\nif 'get_ipython' in globals():\n    # If running in Jupyter/Kaggle\n    main()\nelse:\n    # If running as a script\n    if __name__ == \"__main__\":\n        main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-11T08:24:19.46844Z","iopub.execute_input":"2024-12-11T08:24:19.468867Z","iopub.status.idle":"2024-12-11T08:24:20.081754Z","shell.execute_reply.started":"2024-12-11T08:24:19.46883Z","shell.execute_reply":"2024-12-11T08:24:20.08052Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# to see the analysis\nbreathing_rates = [6, 12, 16, 20]\n\nfor rate in breathing_rates:\n    print(f\"\\nAnalyzing breathing rate: {rate} breaths/min\")\n    analyze_breathing_rate(rate)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-11T08:24:59.648338Z","iopub.execute_input":"2024-12-11T08:24:59.648745Z","iopub.status.idle":"2024-12-11T08:25:00.284218Z","shell.execute_reply.started":"2024-12-11T08:24:59.648709Z","shell.execute_reply":"2024-12-11T08:25:00.283107Z"}},"outputs":[],"execution_count":null}]}